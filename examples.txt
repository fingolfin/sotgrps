The "SOTsmallgrps" package currently contains construction and identification functions for groups whose order factorises into at most four prime factors.
Although all functions are called currently by their funny birthnames, they will be given more proper names if this package is released publically.
For groups of order p^4q (p, q are distinct primes), there includes only the construction function, but the identification function is under development aside and will be included once it is finished.
It should be highlighted that this package is not the most suitable for p-groups as the existing p-group generation works much efficient; it is not the most suitable for squarefree groups either, but the CGroup package developed by Heiko Dietrich and Darren Low is recommended.



As follows are some examples.

gap> p:=Random(Primes2); q:=Random(Primes2); r:=Random(Primes2); s:=Random(Primes2);
1213
1357105535093947
5749
5477

1. Comparing the counterpart function of the existing "AllSmallGroups" and "ConstructAllGroups" (from the "grpconst" package):
  Order p^2:
    gap> AllSOTGroups(p^2);;time;
    3
    gap> AllSmallGroups(p^2);;time;
    2

  Order p^3:
    gap> AllSOTGroups(p^3);;time;
    4
    gap> AllSmallGroups(p^3);;time;
    28

  Order p^4:
    gap> AllSOTGroups(p^4);;time;
    17
    gap> AllSmallGroups(p^4);;time;
    8

  Order pq:
    gap> AllSOTGroups(p*q);;time;
    2
    gap> AllSmallGroups(p*q);;time;
    Error, reached the pre-set memory limit

  Order p^2q:
    gap> AllSOTGroups(p^2*q);;time;
    3
    gap> AllSmallGroups(p^2*q);;time;
    Error, reached the pre-set memory limit
    gap> ConstructAllGroups(p^2*q);;time;
    zsh: killed     ./gap

  Order p^3q:
    gap> AllSOTGroups(p^3*q);;time;
    8
    gap> Size(AllSOTGroups(p^3*q));
    5

  Order p^4q:
    gap> AllSOTGroups(p^4*q);;time;
    30
    gap> Size(AllSOTGroups(p^4*q));
    15

  Order p^2q^2:
    gap> AllSOTGroups(p^2*q^2);;time;
    5
    gap> Size(AllSOTGroups(p^2*q^2));
    4

  Order pqr
    gap> AllSOTGroups(p*q*r);;time;
    2
    gap> AllSmallGroups(p*q*r);;time;
    Error, reached the pre-set memory limit
    # note that: gap> AllCGroups(p*q*r*s);;time;
    #  2

  Order p^2qr:
    gap> AllSOTGroups(p^2*q*r);;time;
    4
    gap> Size(AllSOTGroups(p^2*q*r));
    2

  Order pqrs:
    gap> AllSOTGroups(p*q*r*s);;time;
    2
    # note that: gap> AllCGroups(p*q*r*s);;time;
    #  2

  For orders p^4q, although the identification function and detailed proofs for construction are still ongoing work, some examples are included here:
  gap> p:=Random(Primes2);
  1429  gap> AllSmallGroups(2^4*p);;time;
  292
  gap> AllSOTGroups(2^4*p);;time;
  46

  gap> p:=Random(Primes2);
  1795918038741070627
  gap> AllSmallGroups(2^4*p);;time;
  Error, reached the pre-set memory limit
  gap> AllSOTGroups(2^4*p);;time;
  42
  gap> AllSmallGroups(3^4*p);;time;
  Error, reached the pre-set memory limit

  gap> AllSmallGroups(5*11^4);
  Error, AllSmallGroups / OneGroup: groups of order 73205 not available
  gap> ConstructAllGroups(5*11^4);;time;
  324293
  gap> AllSOTGroups(5*11^4);;time;
  81

  Summary: For the extreme cases such as p-groups and squarefree groups, the "AllSOTGroups" function performs not always more efficient.
  Note that for the squarefree case, the "CGroup" package is the most efficient amongst these three functions.

2. Comparing the similar function to "NumberSmallGroups":
  gap> p:=Random(Primes2); q:=Random(Primes2); r:=Random(Primes2); s:=Random(Primes2);
  4801
  5393
  6577
  4273

  Order p^2:
    gap> NumberOfSOTGroups(p^2);
    2
    gap> NumberSmallGroups(p^2);
    2

  Order p^3:
    gap> NumberOfSOTGroups(p^3);
    5
    gap> NumberSmallGroups(p^3);
    5

  Order p^4:
    gap> NumberOfSOTGroups(p^4);
    15
    gap> NumberSmallGroups(p^4);
    15

  Order pq:
    gap> NumberOfSOTGroups(p*q);
    1
    gap> NumberSmallGroups(p*q);
    1

  Order p^2q:
    gap> NumberOfSOTGroups(p^2*q);
    2
    gap> NumberSmallGroups(p^2*q);
    2

  Order p^3q:
    gap> NumberOfSOTGroups(p^3*q);
    5
    gap> NumberSmallGroups(p^3*q);
    Error, the library of groups of size 596795497824593 is not available

  Order p^4q:
    gap> NumberOfSOTGroups(p^4*q);
    15
    gap> NumberSmallGroups(p^4*q);
    Error, the library of groups of size 2865215185055870993 is not available

  Order p^2q^2:
    gap> NumberOfSOTGroups(p^2*q^2);
    4
    gap> NumberSmallGroups(p^2*q^2);
    Error, the library of groups of size 670384944754849 is not available

  Order pqr
    gap> NumberOfSOTGroups(p*q*r);
    1
    gap> NumberSmallGroups(p*q*r);
    1

  Order p^2qr:
    gap> NumberOfSOTGroups(p^2*q*r);
    2
    gap> NumberSmallGroups(p^2*q*r);
    Error, the library of groups of size 817563838615361 is not available

  Order pqrs:
    gap> NumberOfSOTGroups(p*q*r*s);
    1
    gap> NumberSmallGroups(p*q*r*s);
    1

3. For small orders, the "compare" test is run to compare the runtime for all groups of order type available in "sotgrps" package and up to 10^4.
  In particular, the test calls "IdSmallGroup" function to identify all groups constructed by "AllSOTGroups" and calls "IdSOTGroup" to identify all groups constructed by "AllSmallGroups" for the at-most-4-prime-factors types.

  isppower := x -> IsInt( x ) and x > 1 and List( Collected( FactorsInt( x ) ), i -> i[2] ) = [ 1 ] and Length( Factors ( x ) ) < 5;;
  ispq := x -> IsInt( x ) and x > 1 and List( Collected( FactorsInt( x ) ), i -> i[2] ) = [1, 1];;
  isp2q := x -> IsInt( x ) and x > 1 and List( Collected( FactorsInt( x ) ),i -> i[2] ) in [ [ 2, 1 ], [ 1, 2 ] ];;
  isp3q := x -> IsInt( x ) and x > 1 and List( Collected( FactorsInt( x ) ),i -> i[2] ) in [ [ 3, 1 ], [ 1, 3 ] ];;
  isp4q := x -> IsInt( x ) and x > 1 and List( Collected( FactorsInt( x ) ), i -> i[2] ) in [ [ 1, 4 ], [ 4, 1, ] ];;
  isp2q2 := x -> IsInt( x ) and x > 1 and List( Collected( FactorsInt( x ) ), i -> i[2] ) = [ 2, 2 ];;
  ispqr := x -> IsInt( x ) and x > 1 and List( Collected( FactorsInt( x ) ), i -> i[2] ) = [1, 1, 1];;
  isp2qr := x -> IsInt( x ) and x > 1 and List( Collected( FactorsInt( x ) ),i -> i[2] ) in [ [ 1, 1, 2 ], [ 1, 2, 1 ], [2, 1, 1] ];;
  ispqrs := x -> IsInt( x ) and x > 1 and List( Collected( FactorsInt( x ) ), i -> i[2] ) = [1, 1, 1, 1];;


  elppower := Filtered([1..10000], x -> isppower(x));;
  elpq := Filtered([1..10000], x -> ispq(x));;
  elp2q := Filtered([1..10^5], x -> isp2q(x));;
  elp3q := Filtered([1..10^5], x -> isp3q(x));;
  elp4q := Filtered([1..10000], x -> isp4q(x));;
  elp2q2 := Filtered([1..10^5], x -> isp2q2(x));;
  elpqr := Filtered([1..10000], x -> ispqr(x));;
  elp2qr := Filtered([1..10^5], x -> isp2qr(x));;
  elpqrs := Filtered([1..10000], x -> ispqrs(x));;

  compare := function( list )
  local nums, grps, ids, tm, tg, tim, tgi, ids2, grg, grm, tgm;

     nums:= Sum(List(list,NumberSmallGroups));
     Print("there are ",nums," groups \n");
     if not Sum(list,NumberOfSOTGroups) = nums then Error("number not correct"); fi;
     tg  := Runtime();
     grg := List(list,x->AllSmallGroups(x));
     tg  := Runtime()-tg;
     Print("GAP construction: ",tg,"\n");
     tm  := Runtime();
     grm := List(list,x->AllSOTGroups(x));
     tm  := Runtime()-tm;
     Print("SOT construction: ",tm,"\n");
     tgi := Runtime();
     ids := List(Flat(grm),IdSmallGroup);
     tgi := Runtime()-tgi;
     Print("gaps ID: ",tgi,"\n");
     tgm := Runtime();
     ids2 := List(Flat(grg),IdSOTGroup);
     tgm := Runtime()-tgm;
     Print("SOT ID: ",tgm,"\n");
     if not IsDuplicateFreeList(ids) then Error("our group ids"); fi;
     if not IsDuplicateFreeList(ids2) then Error("our id function"); fi;
     return [nums,tg,tm,tgi,tgm];
  end;

  gap> compare(elppower);
  there are 1229 groups
  GAP construction: 308
  SOT construction: 478
  gaps ID: 25
  SOT ID: 51
  [ 1229, 308, 478, 25, 51 ]

  gap> compare(elpq);
  there are 3652 groups
  GAP construction: 5102
  SOT construction: 1850
  gaps ID: 65
  SOT ID: 75
  [ 3652, 5102, 1850, 65, 75 ]

  gap> compare(elp2q);
  there are 20514 groupsÂ 
  GAP construction: 205558
  SOT construction: 17458
  gaps ID: 785815
  SOT ID: 70268
  [ 20514, 205558, 17458, 785815, 70268 ]

  gap> compare(elp3q);
  Error, the library of groups of size 2662 is not available
  Note that for order type p^3q the SmallGroupLibrary does not cover groups of order greater than 2500, so the list of orders has to be reduced in order for compare to run:
  gap> elp3q := Filtered(elp3q, x->SmallGroupsAvailable(x));;
  gap> compare(elp3q);
  there are 1138 groups
  GAP construction: 1257
  SOT construction: 734
  gaps ID: 2186
  SOT ID: 1795
  [ 1138, 1257, 734, 2186, 1795 ]

  gap> compare(elpqr);
  there are 6065 groups
  GAP construction: 6401
  SOT construction: 3730
  gaps ID: 4654
  SOT ID: 4031
  [ 6065, 6401, 3730, 4654, 4031 ]

  gap> elp2qr := Filtered(elp2qr, x->SmallGroupsAvailable(x));;
  gap> compare(elp2qr);
  there are 48459 groups
  GAP construction: 27431251
  SOT construction: 43740
  gaps ID: 43603799
  SOT ID: 163333
  [ 48459, 27431251, 43740, 43603799, 163333 ]

  Summary: Again, the overall performance for p-groups of the "SOTsmallgrps" package is slightly less efficient than the existing SmallGroupLibrary.
  For all other order types the construction function "AllSOTGroups" performs always better, especially for orders p^2qr.
  The identification function "SOTIdSmallGroup" is most of the time more efficient than "IdSmallGroup".

  For orders p^4q, since our identification is still under development, only a comparison of construction runtime can be made:

  compareconst := function( list )
  local nums, grps, ids, tm, tg, tim, tgi, ids2, grg, grm, tgm;

     nums:= Sum(List(list,NumberSmallGroups));
     Print("there are ",nums," groups \n");
     if not Sum(list,NumberOfSOTGroups) = nums then Error("number not correct"); fi;
     tg  := Runtime();
     grg := List(list,x->AllSmallGroups(x));
     tg  := Runtime()-tg;
     Print("GAP construction: ",tg,"\n");
     tm  := Runtime();
     grm := List(list,x->AllSOTGroups(x));
     tm  := Runtime()-tm;
     Print("SOT construction: ",tm,"\n");
     tgi := Runtime();
     return [nums,tg,tm];
  end;

  gap> compareconst(elp4q);
  there are 6565 groups
  GAP construction: 13500
  SOT construction: 5850
  [ 6565, 13500, 5850 ]

  It is observed that the construction by "AllSOTGroups" takes only half of the time than "AllSmallGroups".

4. For some small orders that are not available in SmallGroupLibrary, the "ConstructAllGroups" or "ConstructAllCFGroupsis called to compare runtime of "AllSOTGroups" by the following function.

  comparegrpconst := function( list )
  local nums, grps, grpconst, tm, tg, tim, tgi, ids2, grg, grm, tgm;

     nums:= Sum(list, NumberOfSOTGroups);
     Print("there are ",nums," groups \n");
     tg  := Runtime();
     grg := List(list,x -> ConstructAllGroups(x));
     tg  := Runtime()-tg;
     Print("grpconst construction: ",tg,"\n");
     tm  := Runtime();
     grm := List(list,x->AllSOTGroups(x));
     tm  := Runtime()-tm;
     Print("SOT construction: ",tm,"\n");
     tgi := Runtime();
     if not Sum(List(grg, x->Size(x))) = nums then Error("number not correct"); fi;
     return [nums,tg,tm];
  end;

  compareCF := function( list )
  local nums, grps, grpconst, tm, tg, tim, tgi, ids2, grg, grm, tgm;

     nums:= Sum(list, NumberOfSOTGroups);
     Print("there are ",nums," groups \n");
     tg  := Runtime();
     grg := List(list,x -> ConstructAllCFGroups(x));
     tg  := Runtime()-tg;
     Print("cubefree construction: ",tg,"\n");
     tm  := Runtime();
     grm := List(list,x->AllSOTGroups(x));
     tm  := Runtime()-tm;
     Print("SOT construction: ",tm,"\n");
     tgi := Runtime();
     if not Sum(List(grg, x->Size(x))) = nums then Error("number not correct"); fi;
     return [nums,tg,tm];
  end;

  First compaar orders up to 10^5 that are unavailable in SmallGroupLibrary between "AllSOTGroups" and "ConstructAllGroups":

  elp3q := Filtered([1..100000], x -> isp3q(x) and not SmallGroupsAvailable(x));;
  gap> comparegrpconst(elp3q);
  there are 450 groups
  grpconst construction: 2335327
  SOT construction: 297
  [ 450, 2335327, 297 ]

  It is noted that SmallGroupLibrary does not cover orders of the form p^2q^2 greater than 50000, so a similar test is run for such orders up to 10^5 to compare "AllSOTGroups" with "ConstructAllGroups" and "ConstructAllCFGroups".

  elp2q2 := Filtered([1..100000], x -> isp2q2(x) and not SmallGroupsAvailable(x));;
  gap> comparegrpconst(elp2q2);
  there are 255 groups
  grpconst construction: 257837
  SOT construction: 173
  [ 255, 257837, 173 ]

  gap> compareCF(elp2q2);
  there are 255 groups
  GAP construction: 1327446
  SOT construction: 176
  [ 255, 1327446, 176 ]

  SOTconst := function( list )
  local nums, grps, grpconst, tm, tg, tim, tgi, ids2, grg, grm, tgm;

     nums:= Sum(list, NumberOfSOTGroups);
     Print("there are ",nums," groups \n");
     tm  := Runtime();
     grm := List(list,x->AllSOTGroups(x));
     tm  := Runtime()-tm;
     Print("SOT construction: ",tm,"\n");
     tgi := Runtime();
     if not Sum(List(grg, x->Size(x))) = nums then Error("number not correct"); fi;
     return [nums,tg,tm];
  end;

  SmallGroupconst := function( list )
  local nums, grps, grpconst, tm, tg, tim, tgi, ids2, grg, grm, tgm;

     nums:= Sum(list, NumberSmallGroups);
     Print("there are ",nums," groups \n");
     tg  := Runtime();
     grg := List(list,x -> ConstructAllCFGroups(x));
     tg  := Runtime()-tg;
     Print("cubefree construction: ",tg,"\n");
     tm  := Runtime();
     grm := List(list,x->AllSOTGroups(x));
     tm  := Runtime()-tm;
     Print("SOT construction: ",tm,"\n");
     tgi := Runtime();
     if not Sum(List(grg, x->Size(x))) = nums then Error("number not correct"); fi;
     return [nums,tg,tm];
  end;
